# vim: ft=yaml
# yamllint disable rule:comments-indentation
---
hass:
  install:
      # Install rootless containers running as dedicated user.
    rootless: true
      # Add autoupdate label to containers, allowing to run
      # podman autoupdate (manually)
    autoupdate: true
      # Manage podman-auto-update.timer (auto-autoupdate)
      # (null=do not manage, false=disable, true=enable)
    autoupdate_service: false
      # When applying `clean` states, also remove application data.
      # Setting this to true might incur accidental data loss!
    remove_all_data_for_sure: false
    # These values will be put into configuration.yaml
    #   a) if there is no previous file
    #   b) or if hass:config_management:manage_base_config is set to true.
  config_base:
    automation: '!include automations.yaml'
    default_config: null
    homeassistant:
      allowlist_external_dirs: []
      currency: USD
      elevation: 0
      latitude: 0
      longitude: 0
      name: Home Assistant
      time_zone: Etc/UTC
      unit_system: metric
    scene: '!include scenes.yaml'
    script: '!include scripts.yaml'
    # Settings related to Salt management of config files
  config_management:
      # Manage the contents of a PEM-encoded certificate file to be used
      # in CA cert trust settings.
    ca_cert: null
      # When Home Assistant configuration files are provided in files/<TOFS>/config,
      # they are synced recursively. To avoid issues with Jinja rendering, by default
      # they are treated literally. You can set this to valid Salt renderers to treat
      # them as templates. Mind that if you choose jinja, you will have to wrap your
      # HA Jinja templates in raw/endraw tags. Another renderer that works similarly
      # is `mako`.
    config_template_lang: null
      # Choose whether an existing configuration.yaml file should be replaced by the
      # values defined in `hass:config_base`. You should not provide one in your TOFS
      # config then to avoid cyclic changes.
    manage_base_config: false
      # When secrets are known to this formula, automatically merge them into
      # secrets.yaml. This currently applies to database passwords.
      # It provides `db_url` and `influx_token` values.
    secrets_manage: true
      # Mapping of secrets to pull into secrets.yaml. Will be merged with
      # values from secret_pillar.
    secrets: {}
      # This formula can pull secrets.yaml values from a pillar value. Specify where
      # to look for them (in typical Salt notation, some:pillar:value).
    secrets_pillar: ''
    # Settings specific to HA container
  container:
      # List of devices that are mapped into the container. The syntax is exactly
      # like you would write inside a docker-compose.yml file.
    devices: []
    # Database settings
  db:
      # sqlite is default and does not need the rest of the settings.
      # also possible: mariadb, postgres
    type: sqlite
    name: hass
      # If password and password_pillar are left unset, this formula will
      # autogenerate a password and save it in a grain value (unsafe).
    password: null
    password_pillar: null
      # Instead of using TCP, map the socket directly into the container.
      # This might fail with postgres without further configuration.
    socket: false
    user: hass
    # Settings regarding HACS (Home Assistant Community Store)
  hacs:
      # Choose whether to serialize the configuration specified in hass:hacs:config
      # into hacs.yaml, which you need to include in your main configuration file.
      # This method is deprecated by HACS and will disable some functionality
      # (updates and diagnostic dump).
    apply_yaml_config: false
    config:
      appdaemon: true
      country: null
      experimental: false
      netdaemon: true
      release_limit: 5
      sidepanel_icon: mdi:alpha-c-box
      sidepanel_title: Community
      token: '!secret github_token'
      # Whether to make sure HACS is installed. By default, it will look for
      # `hacs.zip` inside TOFS dirs. If the custom github_releases module
      # is available, it will fall back to downloading the latest release
      # from GitHub.
    install: true
    # InfluxDB settings
  influxdb:
      # Choose whether to install InfluxDB
    install: false
      # Custom configuration that will be mapped into the container
    config: {}
      # If the container starts without a database, these values will
      # be used to initialize one.
    db_init:
        # The authentication token to associate with the system's initial super-user.
        # behaves the same way as db:password above
      admin_token: null
      admin_token_pillar: null
        # initial bucket
      bucket: hass
        # initial organization
      org: hass
        # inital super-user password, behaves the same way as db:password above
      password: null
      password_pillar: null
        # The duration the system's initial bucket should retain data for.
      retention: null
        # initial super-user
      user: hass
    # Use my custom github_releases module to pull releases from GitHub.
    # This is used as a fallback in HACS installation.
  salt_mod_github_releases: true

  lookup:
    rootgroup: root
    compose:
      create_pod: false
      pod_args: null
      project_name: homeassistant
      remove_orphans: true
      build: false
      build_args: null
      pull: false
      service:
        container_prefix: null
        ephemeral: true
        pod_prefix: null
        restart_policy: on-failure
        restart_sec: 2
        separator: null
        stop_timeout: null
        service_overrides: {'homeassistant': {'requires': 'homeassistant_mariadb_1.service'}}  # yamllint disable-line rule:line-length
    paths:
      base: /opt/containers/homeassistant
      compose: docker-compose.yml
      config_homeassistant: homeassistant.env
      config_influxdb: influxdb.env
      config_mariadb: mariadb.env
      config_postgres: postgres.env
      config: config
      influxdb_config: influxdb_config
      influxdb_data: influxdb_data
      mariadb: mariadb
      postgres: postgres
    user:
      groups: ['dialout']
      home: null
      name: homeassistant
      shell: /usr/sbin/nologin
      uid: null
      gid: null
    containers:
      homeassistant:
        image: ghcr.io/home-assistant/home-assistant:stable
      influxdb:
        image: docker.io/library/influxdb:latest
      mariadb:
        image: docker.io/library/mariadb:latest
      postgres:
        image: docker.io/library/postgres:latest
    hacs:
      hash: ''
      repo: hacs/integration

  tofs:
      # The files_switch key serves as a selector for alternative
      # directories under the formula files directory. See TOFS pattern
      # doc for more info.
      # Note: Any value not evaluated by `config.get` will be used literally.
      # This can be used to set custom paths, as many levels deep as required.
    files_switch:
      - any/path/can/be/used/here
      - id
      - roles
      - osfinger
      - os
      - os_family

      # All aspects of path/file resolution are customisable using the options below.
      # This is unnecessary in most cases; there are sensible defaults.
      # Default path: salt://< path_prefix >/< dirs.files >/< dirs.default >
      # I.e.: salt://hass/files/default
      # path_prefix: template_alt
      # dirs:
      #   files: files_alt
      #   default: default_alt
      # The entries under `source_files` are prepended to the default source files
      # given for the state
    source_files:
      Home Assistant compose file is managed:
        - docker-compose_alt.yml
        - docker-compose_alt.yml.j2
      homeassistant environment file is managed:
        - homeassistant_alt.env
        - homeassistant_alt.env.j2
      influxdb environment file is managed:
        - influxdb_alt.env
        - influxdb_alt.env.j2
      mariadb environment file is managed:
        - mariadb_alt.env
        - mariadb_alt.env.j2
      postgres environment file is managed:
        - postgres_alt.env
        - postgres_alt.env.j2
      Home Assistant configuration is synced:
        - config_alt
      Home Assistant base configuration is present:
        - configuration_alt.yaml
        - configuration_alt.yaml.j2
      HACS is installed:
        - hacs_alt.zip
      HACS YAML configuration is managed:
        - hacs_alt.yaml
        - hacs_alt.yaml.j2
